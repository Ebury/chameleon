// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EcWithAbortableFetch should abort fetch call when destroyed 1`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should abort previous fetch calls 1`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should abort previous fetch calls 2`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should abort previous fetch calls 3`] = `
{
  "data": {
    "result": 2,
  },
  "error": null,
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should map the given custom props: after fetch 1`] = `
{
  "dataCustom": {
    "result": 1,
  },
  "errorCustom": null,
  "isLoadingCustom": false,
}
`;

exports[`EcWithAbortableFetch should map the given custom props: while loading 1`] = `
{
  "dataCustom": null,
  "errorCustom": null,
  "isLoadingCustom": true,
}
`;

exports[`EcWithAbortableFetch should not propagate the error when re-fetching after an error occurred 1`] = `
{
  "data": null,
  "error": [Error: Random error],
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should not propagate the error when re-fetching after an error occurred 2`] = `
[MockFunction] {
  "calls": [
    [
      undefined,
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`EcWithAbortableFetch should not propagate the error when re-fetching after an error occurred 3`] = `
[
  [
    [Error: Random error],
  ],
]
`;

exports[`EcWithAbortableFetch should not propagate the error when re-fetching after an error occurred 4`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should not propagate the error when re-fetching after an error occurred 5`] = `
[MockFunction] {
  "calls": [
    [
      {
        "anotherProp": 2,
      },
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`EcWithAbortableFetch should not propagate the error when re-fetching after an error occurred 6`] = `
{
  "data": {
    "result": 1,
  },
  "error": null,
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should re-fetch the data if arguments change 1`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should re-fetch the data if arguments change 2`] = `
[MockFunction] {
  "calls": [
    [
      {
        "prop": 1,
      },
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`EcWithAbortableFetch should re-fetch the data if arguments change 3`] = `
{
  "data": {
    "result": 1,
  },
  "error": null,
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should re-fetch the data if arguments change 4`] = `
{
  "data": {
    "result": 1,
  },
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should re-fetch the data if arguments change 5`] = `
[MockFunction] {
  "calls": [
    [
      {
        "anotherProp": 2,
      },
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`EcWithAbortableFetch should re-fetch the data if arguments change 6`] = `
{
  "data": {
    "result": 2,
  },
  "error": null,
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should send the given fetch arguments 1`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should send the given fetch arguments 2`] = `
[MockFunction] {
  "calls": [
    [
      {
        "prop": 1,
      },
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`EcWithAbortableFetch should start fetching when created 1`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should start fetching when created 2`] = `
[MockFunction] {
  "calls": [
    [
      undefined,
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`EcWithAbortableFetch should stop fetching and keep the state intact if fetch for rejected because of AbortError 1`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should stop fetching and map the custom error prop to the component after dataSource gets rejected 1`] = `
{
  "dataCustom": null,
  "errorCustom": [Error: Random error],
  "isLoadingCustom": false,
}
`;

exports[`EcWithAbortableFetch should stop fetching and map the custom error prop to the component after dataSource gets rejected 2`] = `
[MockFunction] {
  "calls": [
    [
      undefined,
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`EcWithAbortableFetch should stop fetching and map the custom error prop to the component after dataSource gets rejected 3`] = `
[
  [
    [Error: Random error],
  ],
]
`;

exports[`EcWithAbortableFetch should stop fetching and pass the data to the component after dataSource gets resolved 1`] = `
{
  "data": {
    "prop": 1,
  },
  "error": null,
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should stop fetching and pass the data to the component after dataSource gets resolved 2`] = `
[MockFunction] {
  "calls": [
    [
      undefined,
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`EcWithAbortableFetch should stop fetching and pass the error to the component after dataSource gets rejected 1`] = `
{
  "data": null,
  "error": [Error: Random error],
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should stop fetching and pass the error to the component after dataSource gets rejected 2`] = `
[MockFunction] {
  "calls": [
    [
      undefined,
      AbortSignal {},
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`EcWithAbortableFetch should stop fetching and pass the error to the component after dataSource gets rejected 3`] = `
[
  [
    [Error: Random error],
  ],
]
`;

exports[`EcWithAbortableFetch should transform props using given data transform function and pass them to given custom data prop: after fetch 1`] = `
{
  "dataCustom": {
    "result": 1,
  },
  "error": null,
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should transform props using given data transform function and pass them to given custom data prop: while loading 1`] = `
{
  "dataCustom": {
    "result": 0,
  },
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should transform props using given data transform function: after fetch 1`] = `
{
  "data": {
    "result": 1,
  },
  "error": null,
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should transform props using given data transform function: while loading 1`] = `
{
  "data": {
    "result": 0,
  },
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should transform props using given error transform function and pass them to given custom error prop: after fetch 1`] = `
{
  "data": null,
  "errorCustom": "Custom error message (Random error)",
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should transform props using given error transform function and pass them to given custom error prop: while loading 1`] = `
{
  "data": null,
  "errorCustom": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should transform props using given error transform function: after fetch 1`] = `
{
  "data": null,
  "error": "Custom error message (Random error)",
  "loading": false,
}
`;

exports[`EcWithAbortableFetch should transform props using given error transform function: while loading 1`] = `
{
  "data": null,
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should transform props using given loading transform function and pass them to given custom loading prop and custom data prop: after fetch 1`] = `
{
  "dataCustom": {
    "result": 1,
  },
  "error": null,
  "loadingCustom": true,
}
`;

exports[`EcWithAbortableFetch should transform props using given loading transform function and pass them to given custom loading prop and custom data prop: while loading 1`] = `
{
  "dataCustom": null,
  "error": null,
  "loadingCustom": false,
}
`;

exports[`EcWithAbortableFetch should transform props using given loading transform function: after fetch 1`] = `
{
  "data": {
    "result": 1,
  },
  "error": null,
  "loading": true,
}
`;

exports[`EcWithAbortableFetch should transform props using given loading transform function: while loading 1`] = `
{
  "data": null,
  "error": null,
  "loading": false,
}
`;
